@inject NavigationManager nav
@inject Blazored.SessionStorage.ISessionStorageService session
@inject HttpClient http


<EditForm Model="usuario" OnSubmit="Logar">
    <div class="modal fade" id="modalEntrar" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Entrar</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="usuarioLogin" class="col-form-label">Usuario / Email</label>
                            <input type="text" class="form-control" id="usuarioLogin" placeholder="Usuario ou Email" @bind-value="usuario.User">
                        </div>
                        <div class="form-group">
                            <label for="message-text" class="col-form-label">Senha</label>
                            <input type="password" class="form-control" placeholder="Senha" @bind-value="usuario.Senha" />
                        </div>
                        @errorMessage
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Entrar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private Usuario usuario = new();
    private Usuario userLogin = new();
    private List<Usuario> usuarios = new();
    string errorMessage = "";
    public async Task SessionUser(Usuario us)
    {
        await session.SetItemAsync("SessionUser", us);
    }
    private async Task Logar()
    {
        usuarios = await http.GetFromJsonAsync<List<Usuario>>($"https://suateoriaapi.azurewebsites.net/usuarios");
        if (usuarios.Where(x => x.User.ToLower() == usuario.User.ToLower()).Any())
        {
            if (usuarios.Where(x => x.User == usuario.User && x.Senha == usuario.Senha).Any())
            {
                userLogin = usuarios.First(x => x.User == usuario.User && x.Senha == usuario.Senha);
                SessionUser(userLogin);
                nav.NavigateTo("", true);
            }
            else
                errorMessage = "Login ou senha inválido.";
        }

        else
            errorMessage = "Usuario não existe, cadastre-se.";

        //nav.NavigateTo("",true);
    }
}