@inject NavigationManager nav
@inject Blazored.SessionStorage.ISessionStorageService session
@inject HttpClient http
@inject IJSRuntime js


<EditForm Model="usuario" OnSubmit="Logar">
    <div class="modal fade" id="modalEntrar" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Entrar</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="usuarioLogin" class="col-form-label">Usuario</label>
                            <input type="text" class="form-control" id="usuarioLogin" placeholder="Usuario" @bind-value="usuario.User">
                        </div>
                        <div class="form-group">
                            <label for="message-text" class="col-form-label">Senha</label>
                            <input type="@password" class="form-control" placeholder="Senha" @bind-value="usuario.Senha" />
                        </div>
                        <div class="form-group">
                            <label>Mostrar Senha</label> <input type="checkbox" @bind-value="@mostrarSenha" @onclick="MostrarSenha" />
                        </div>
                        @errorMessage
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary @Disabled">Entrar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    int count;
    int tentativas;
    Random random = new();

    bool mostrarSenha = false;
    string password = "password";

    private Usuario usuario = new();
    private Usuario userLogin = new();
    private List<Usuario> usuarios = new();
    string errorMessage = "";
    public string Disabled = "";

    protected override async Task OnInitializedAsync()
    {
        count = 0;
        tentativas = random.Next(4, 7);
    }

    public async Task SessionUser(Usuario us)
    {
        //await session.SetItemAsync("SessionUser", us);
        await js.InvokeVoidAsync("localStorage.setItem", "Usuario",us.Id);

    }
    private async Task Logar()
    {
        try
        {
            if (!string.IsNullOrEmpty(usuario.User) && !string.IsNullOrEmpty(usuario.Senha))
            {
                Disabled = "disabled";

                usuarios = await http.GetFromJsonAsync<List<Usuario>>($"https://suateoriaapi.azurewebsites.net/usuarios");
                if (usuarios.Where(x => x.User.ToLower() == usuario.User.ToLower()).Any())
                {
                    if (usuarios.Where(x => x.User == usuario.User && x.Senha == usuario.Senha).Any())
                    {
                        userLogin = usuarios.First(x => x.User == usuario.User && x.Senha == usuario.Senha);
                        await SessionUser(userLogin);
                        nav.NavigateTo(nav.Uri, true);
                    }
                    else
                    {
                        Disabled = "";
                        errorMessage = "Login ou senha inválido.";
                        count = count + 1;
                        if (count > tentativas)
                        {
                            await js.InvokeVoidAsync("alert", "Login ou senha inválido. Você será redirecionado para o início");
                            nav.NavigateTo(@nav.Uri, true);
                        }

                    }
                }

                else
                {
                    Disabled = "";
                    errorMessage = "Usuario não existe, cadastre-se.";
                }
            }
            else
            {
                Disabled = "";
                errorMessage = "Os campos não podem ficar vazios.";
            }
        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", ex.Message);
            nav.NavigateTo(@nav.Uri, true);
        }
        

    }
    public async Task MostrarSenha()
    {
        mostrarSenha = !mostrarSenha;
        if (mostrarSenha)
        {
            password = "text";
        }
        else
            password = "password";
    }

}