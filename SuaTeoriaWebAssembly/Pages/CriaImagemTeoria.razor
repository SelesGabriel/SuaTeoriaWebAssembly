@inject IJSRuntime js

    @if (img64 == null)
{
    <div contenteditable="false">
        <label for='selecao-arquivo'>Selecionar um arquivo &#187;</label>
        <div class="drag-drop-zone">
            <BlazorInputFile.InputFile OnChange="HandleFileSelect" id='selecao-arquivo'></BlazorInputFile.InputFile>
        </div>
    </div>

}

@if (!String.IsNullOrEmpty(img64))
{
    <div contenteditable=false>
        <i class="fa fa-arrows-alt-v"></i>
        <input class="tamanhoImagem" type="number" min="4" max="99" maxlength="2" @bind-value="heightInt" />
        <i class="fa fa-arrows-alt-h"></i>
        <input class="tamanhoImagem" type="number" min="4" max="99" maxlength="2" @bind-value="widthInt" />
         <i class="fa fa-trash"></i>
    </div>
    <br />
    <img style="height:@height; width:@width; max-width:100%; max-height:1000px; margin-right:10px;" src="data:image/jpeg;base64, @img64" />
}

@code {
    IFileListEntry? file;
    string? img64;
    string errMessage = "";
    int widthInt = 5;
    int heightInt = 5;
    string? width;
    string? height;


    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            width = widthInt.ToString() + "vw";
            height = heightInt.ToString() + "vh";
        }
    }

    async Task HandleFileSelect(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 2000000)
            {
                errMessage = "Tamanho limite máximo da imagem: 2MB";
                await js.InvokeVoidAsync("alert", errMessage);
                return;
            }

        }
        await GetBase64File();
        StateHasChanged();
    }

    async Task GetBase64File()
    {
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        img64 = Convert.ToBase64String(bytes);
    }

}
