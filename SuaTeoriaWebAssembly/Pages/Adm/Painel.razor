@page "/painel"
@inject IJSRuntime js
@inject HttpClient http
@inject NavigationManager nav

<EditForm Model="categoria" OnSubmit="@PostCategoriaAsync">
    <div class="container">
        <h2 style="color:#d3d3d3">Adicionar categoria</h2>
        <div class="col-sm-12 my-3">
            <input type="text" placeholder="Nome da categoria" @bind-value="categoria.Nome" />
            <input type="submit" value="Criar Categoria" class="btn-dark btn-md">
        </div>

    </div>
</EditForm>
<br />
<EditForm Model="obra" OnSubmit="@PostObraAsync">
    <div class="container">
        <h2 style="color:#d3d3d3">Adicionar obra</h2>
        <div class="col-sm-12 my-3">
            <select class="form-select" @bind="obra.IdCategoria">
                <option value="0">Selecione uma categoria</option>
                @foreach (var item in criaCategorias)
                {
                    <option value="@item.Id">@item.Nome.ToUpper()</option>
                }
            </select>
            <input type="text" placeholder="Nome da obra" @bind-value="obra.Nome" />
            <BlazorInputFile.InputFile OnChange="AdicionaImagemObra" id="imagemTituloPainel"></BlazorInputFile.InputFile>
            <input type="submit" value="Criar Obra" class="btn-dark btn-md">
        </div>
    </div>
</EditForm>
<br />
@*<EditForm Model="teoria" OnSubmit="@"*@

<div class="container">
    <h2 style="color:#d3d3d3">Alterar obra não encontrada</h2>
    <table class="table">
        <thead>
        <th style="color:#d3d3d3" scope="col">Titulo da teoria</th>
        <th style="color:#d3d3d3" scope="col">Nome da nova obra</th>
        <th style="color:#d3d3d3" scope="col">categoria selecionada</th>
        <th style="color:#d3d3d3" scope="col">Categoria</th>
        <th style="color:#d3d3d3" scope="col">Obra</th>
        <th style="color:#d3d3d3" scope="col">Ação</th>
        </thead>
        <tbody>
            @foreach (var t in Teorias.Where(x => x.IdObra == -1))
            {
                <tr>
                    <td style="color:#d3d3d3">@t.Titulo</td>
                    <td style="color:#d3d3d3">@t.NovaObra</td>
                    <td style="color:#d3d3d3">@criaCategorias.First(x=>x.Id == t.IdCategoria).Nome</td>
                    <td>
                        <select class="form-select" @bind="teoria.IdCategoria">
                            <option value="0">Selecione uma categoria</option>
                            @foreach (var item in criaCategorias)
                            {
                                <option value="@item.Id">@item.Nome.ToUpper()</option>
                            }
                        </select>
                    </td>
                    <td>
                        <select class="form-select" @bind="teoria.IdObra">
                            <option value="0">Selecione uma obra</option>
                            @foreach (var item in obras)
                            {
                                <option value="@item.Id">@item.Nome.ToUpper()</option>
                            }
                        </select>
                    </td>
                    <td><button @onclick="(()=>PutTeoriaAsync(t.Id))">Salvar</button></td>
                </tr>
            }
        </tbody>
    </table>

</div>
<br />

<EditForm Model="obraAlterar" OnSubmit="UpdateObra">

    <div class="container">
        <h2 style="color:#d3d3d3">Alterar obra</h2>
        <select class="form-select" @bind="obraAlterar.Id">
            <option value="0">Selecione uma obra</option>
            @foreach (var item in obras)
            {
                <option value="@item.Id">@item.Nome.ToUpper()</option>
            }
        </select>
        <label style="color:#d3d3d3">Alterar imagem:</label>
        <BlazorInputFile.InputFile OnChange="AtualizaImagemObra" id="imagemTituloPainelAlterar"></BlazorInputFile.InputFile>
        <br />
        <label style="color:#d3d3d3">Alterar </label>
        <select class="form-select" @bind="obraAlterar.IdCategoria">
            <option value="0">Selecione uma obra</option>
            @foreach (var item in criaCategorias)
            {
                <option value="@item.Id">@item.Nome.ToUpper()</option>
            }
        </select>
        <br />
        <label style="color:#d3d3d3">Alterar nome:</label>
        <input type="text" @bind-value="obraAlterar.Nome" />
        <br />
        <input type="submit" class="btn-dark" value="Enviar" />
    </div>
</EditForm>

@code {
    Categoria categoria = new();
    List<Categoria> criaCategorias = new();
    List<Categoria> categoriasObras = new();
    List<Obra> obras = new();
    List<Teoria> Teorias = new();
    Obra obra = new();
    Teoria teoria = new();
    IFileListEntry? file;
    string errMessage = "";
    string baseUrl = Configuration.BaseUrl;

    int skip = 0;
    int take = 50;


    protected override async Task OnInitializedAsync()
    {
        await GetCategoriasAsync();
        await GetTeoriaObraNova();
        await GetObrasAsync();
    }

    async Task PostCategoriaAsync()
    {
        if (string.IsNullOrEmpty(categoria.Nome))
        {
            errMessage = "Coloque o nome da categoria";
            await js.InvokeVoidAsync("alert", errMessage);
        }
        else
        {
            await http.PostAsJsonAsync<Categoria>($"{baseUrl}/categorias", categoria);
        }
    }

    async Task PutTeoriaAsync(int idTeoria)
    {
        if (obra.IdCategoria != 0)
        {
            errMessage = "Coloque uma categoria";
            await js.InvokeVoidAsync("alert", errMessage);
        }
        await http.PutAsJsonAsync<Teoria>($"{baseUrl}/teoriaupdate?idTeoria={idTeoria}", teoria);
        nav.NavigateTo("painel", true);
    }

    async Task PostObraAsync()
    {
        if (obra.IdCategoria == 0)
        {
            errMessage = "Selecione uma categoria";
            await js.InvokeVoidAsync("alert", errMessage);
        }
        else if (string.IsNullOrEmpty(obra.Nome))
        {
            errMessage = "Coloque o nome da obra";
            await js.InvokeVoidAsync("alert", errMessage);
        }
        else if (string.IsNullOrEmpty(obra.ImagemObra))
        {

            errMessage = "Coloque uma imagem";
            await js.InvokeVoidAsync("alert", errMessage);
        }
        else
        {
            await http.PostAsJsonAsync<Obra>($"{baseUrl}/obras", obra);
            nav.NavigateTo("painel", true);
        }
    }

    async Task GetCategoriasAsync()
    {
        criaCategorias = await http.GetFromJsonAsync<List<Categoria>>($"{baseUrl}/categorias");
    }

    async Task GetObrasAsync()
    {
        obras = await http.GetFromJsonAsync<List<Obra>>($"{baseUrl}/obras");
    }

    async Task GetTeoriaObraNova()
    {
        Teorias = await http.GetFromJsonAsync<List<Teoria>>($"{baseUrl}/teorias?skip={skip}&take={take}&idCategoria=0");

    }

    Obra obraAlterar = new();
    async Task UpdateObra()
    {
        await http.PutAsJsonAsync<Obra>($"{baseUrl}/obra/{obraAlterar.Id}", obraAlterar);
    }

    //async Task AtualizaObraTeoria()
    //{
    //    await http.PutAsJsonAsync<Teoria>($"{baseUrl}/teoriaupdate");
    //}

    //File Select
    #region File Select
    async Task AdicionaImagemObra(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 2000000)
            {
                errMessage = "Tamanho limite máximo da imagem: 2MB";
                await js.InvokeVoidAsync("alert", errMessage);
                return;
            }

        }
        
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        obra.ImagemObra = Convert.ToBase64String(bytes);
        StateHasChanged();
    }

    async Task AtualizaImagemObra(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 2000000)
            {
                errMessage = "Tamanho limite máximo da imagem: 2MB";
                await js.InvokeVoidAsync("alert", errMessage);
                return;
            }

        }
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        obraAlterar.ImagemObra = Convert.ToBase64String(bytes);
        StateHasChanged();
    }


    #endregion
}
