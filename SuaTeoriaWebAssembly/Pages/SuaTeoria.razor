@page "/suateoria"
@using SuaTeoriaWebAssembly.Pages.Adm
@inject IJSRuntime js
@inject HttpClient http
@inject NavigationManager nav
@inject Blazored.SessionStorage.ISessionStorageService session


<div style="background:white; border:outset;border-radius:1%;">

    <EditForm Model="teoria" OnSubmit="@PostTeoriaAsync">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="container">
            @if (userInfo.Nome == "Anonimous")
            {
                <label style="color:#ab2828">
                    <b>**** Você precisa estar logado para criar uma teoria. Se não tiver uma conta, cadastre-se, é rapidão :) </b>
                </label>
            }
            <div class=row>
                <div class="col-sm-12 my-3">
                    <input type="text" id=tituloTeoria placeholder="Digite o título da teoria..." @bind-value="teoria.Titulo" />
                </div>
                <div class="col-md-6 col-sm-12">

                    <select class="form-select" @bind="teoria.IdCategoria">
                        <option value="0">Selecione uma categoria</option>
                        @foreach (var item in categorias)
                        {
                            <option value="@item.Id">@item.Nome.ToUpper()</option>
                        }
                    </select>
                </div>
                <div class="col-md-6 col-sm-12">
                    <select class="form-select" @bind="teoria.IdObra">
                        <option value="0">Selecione um título</option>
                        @if (teoria.IdCategoria >= 1)
                        {
                            @foreach (var item in obras.Where(w => w.IdCategoria == teoria.IdCategoria).OrderBy(o => o.Nome))
                            {
                                <option value="@item.Id" id="@item.Id">@item.Nome.ToUpper()</option>
                            }
                            <option value="-1">Não encontrei</option>
                        }
                    </select>
                </div>
                @if (teoria.IdObra == -1)
                {
                    <div class="my-3 text-center col-4"></div>
                    <div class="my-3 text-center col-4">
                        <label>Qual você deseja adicionar?</label>
                        <input type="text" class="form-control" @bind-value="teoria.NovaObra" />
                    </div>
                    <div class="my-3 text-center col-4"></div>
                }
            </div>
            <div class="my-3">
                <BlazorInputFile.InputFile OnChange="HandleFileSelect" style="display:none;" id="imagemTituloSuaTeoria"></BlazorInputFile.InputFile>
                <label for="imagemTituloSuaTeoria"
                       style="background-color:#ccc;width:100%;
            border-radius:5px;cursor:pointer;padding:10px;text-align:center">
                    Clique aqui para escolher uma imagem para ser capa da sua teoria &#187
                </label>
                @if (!String.IsNullOrEmpty(@teoria.ImagemTitulo))
                {
                    <input type="image" style="height:50%; width:100%;pointer-events: none;" src="data:image/jpeg;base64, @teoria.ImagemTitulo" disabled="disabled" />
                }
            </div>
        </div>
        <!-- #region Criacao texto -->
        <div class="my-3 container">
            <BlazoredTextEditor @ref="@QuillHtml">
                <ToolbarContent>
                    <select class="ql-font">
                        <option value=""></option>
                        <option value="serif"></option>
                        <option value="monospace"></option>
                    </select>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold" title="Negrito"></button>
                        <button class="ql-italic" title="Itálico"></button>
                        <button class="ql-underline" title="Sublinhado"></button>
                        <button class="ql-strike" title="Traçado"></button>

                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>

                        <button class="ql-link" title="Linkar texto selecionado"></button>
                        <button class="ql-image" title="Adicionar Imagem"></button>
                        <button class="ql-clean" type="button" title="Limpar formatação">
                            <svg class="" viewBox="0 0 18 18">
                                <line class="ql-stroke" x1="5" x2="13" y1="3" y2="3"></line>
                                <line class="ql-stroke" x1="6" x2="9.35" y1="12" y2="3"></line>
                                <line class="ql-stroke" x1="11" x2="15" y1="11" y2="15"></line>
                                <line class="ql-stroke" x1="15" x2="11" y1="11" y2="15"></line>
                                <rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="7" x="2" y="14"></rect>
                            </svg>
                        </button>
                    </span>
                </ToolbarContent>
                <EditorContent>
                    <label>Comece a criar sua teoria aqui :)</label>
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                </EditorContent>
            </BlazoredTextEditor>
        </div>
        <!-- #endregion -->
        @*<button @onclick="getHtml" class="btn-dark my-5"><a href="">Enviar</a></button>*@

        @* <div class="my-3">

        @if (!String.IsNullOrEmpty(@teoria.ImagemTitulo))
        {
        <input type="image" style="height:50%; width:100%;" src="data:image/jpeg;base64, @teoria.ImagemTitulo" />
        }
        </div>
        <div class="my-3 container">
        <CriaTextoTeoria></CriaTextoTeoria>
        </div>*@


        <div class="text-center my-4 py-5">
            <input disabled="@Disabled" type="submit" value="Criar Teoria" class="btn-dark btn-lg">
        </div>

    </EditForm>


</div>

@code {
    string QuillHTMLContent;
    string QuillContent;
    BlazoredTextEditor QuillHtml;
    BlazoredTextEditor QuillNative;
    IFileListEntry? file;
    string errMessage = "";
    string mensagem = "Escolha uma imagem para ser capa da sua teoria";
    int count = 1;
    public string htmlText { get; set; } = "";

    public bool Disabled = false;
    int idCategoria;
    int valorNaoEncontrei;
    string baseUrl = Configuration.BaseUrl;

    List<Categoria> categorias = new();
    Categoria categoria = new();
    List<Obra> obras = new();
    Obra obra = new();


    Teoria teoria = new();

    Usuario userInfo = new();

    protected override async Task OnInitializedAsync()
    {
        Disabled = false;
        string? intUser = await js.InvokeAsync<string>("localStorage.getItem", "Usuario");
        if (intUser == null || intUser == "0")
        {
            userInfo.Nome = "Anonimous";
        }
        else
        {
            userInfo.Id = Convert.ToInt32(intUser);
        }

        //await js.InvokeVoidAsync("teste");
        await GetObrasAsync();
        await GetCategoriaAsync();
    }


    async Task HandleFileSelect(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 2000000)
            {
                errMessage = "Tamanho limite máximo da imagem: 2MB";
                await js.InvokeVoidAsync("alert", errMessage);
                return;
            }

        }
        await GetBase64File();
        StateHasChanged();
    }

    async Task GetBase64File()
    {
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        teoria.ImagemTitulo = Convert.ToBase64String(bytes);
        mensagem = "";
    }




    async Task GetCategoriaAsync()
    {
        Disabled = true;
        categorias = await http.GetFromJsonAsync<List<Categoria>>($"{baseUrl}/categorias");
        Disabled = false;
    }

    async Task GetObrasAsync()
    {
        obras = await http.GetFromJsonAsync<List<Obra>>($"{baseUrl}/obras");
    }

    async Task PostTeoriaAsync()
    {
        Disabled = true;
        //htmlText = await js.InvokeAsync<string>("getHtml");
        htmlText = await this.QuillHtml.GetHTML();
        //htmlText.Replace(input, "").Replace(dragDropZone, "").Replace(altura, "").Replace(largura, "");
        //teoria.Conteudo = htmlText;
        //var teste = await js.InvokeAsync<string>("buscaImagem",htmlText);
        teoria.Conteudo = htmlText;
        try
        {
            if (userInfo.Nome == "Anonimous")
            {
                errMessage = "você precisa estar logado.";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (string.IsNullOrEmpty(teoria.Titulo))
            {
                errMessage = "Coloque um título ppara sua teoria";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (teoria.IdCategoria == 0)
            {
                errMessage = "Selecione uma categoria";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (teoria.IdObra == 0)
            {
                errMessage = "Selecione uma obra";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (string.IsNullOrEmpty(teoria.ImagemTitulo))
            {
                errMessage = "Coloque uma imagem de capa da teoria";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (string.IsNullOrEmpty(teoria.Conteudo))
            {
                errMessage = "Escreva algo na sua teoria :)";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else
            {
                teoria.IdUsuario = userInfo.Id;
                await http.PostAsJsonAsync<Teoria>($"{baseUrl}/teoria", teoria);
                await js.InvokeVoidAsync("alert", "Teoria criada com sucesso!");
                nav.NavigateTo("");
            }
        }
        catch (Exception errMessage)
        {
            await js.InvokeVoidAsync("alert", errMessage);
        }
        Disabled = false;
    }
}