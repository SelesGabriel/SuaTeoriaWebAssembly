@page "/suateoria"
@inject IJSRuntime js
@inject HttpClient http
@inject NavigationManager nav
<div style="background:white; border:outset;border-radius:120px;">

<EditForm Model="teoria" OnSubmit="@PostTeoriaAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="container">
        <div class=row>
            <div class="col-sm-12 my-3">
                <input type="text" id=tituloTeoria placeholder="Digite o título da teoria..." @bind-value="teoria.Titulo" />
            </div>
            <div class="col-md-6 col-sm-12">

                <select class="form-select" @bind="teoria.IdCategoria">
                    <option value="0">Selecione uma categoria</option>
                    @foreach (var item in categorias)
                    {
                        <option value="@item.Id">@item.Nome.ToUpper()</option>
                    }
                </select>
            </div>
            <div class="col-md-6 col-sm-12">
                <select class="form-select" @bind="teoria.IdObra">
                    <option value="0">Selecione um título</option>
                    @if (teoria.IdCategoria >= 1)
                    {
                        @foreach (var item in obras.Where(w => w.IdCategoria == teoria.IdCategoria).OrderBy(o => o.Nome))
                        {
                            <option value="@item.Id">@item.Nome.ToUpper()</option>
                        }
                        <option value="-1">Não encontrei</option>
                    }
                </select>
            </div>
            @if (teoria.IdObra == -1)
            {
                <div class="my-3 text-center col-4"></div>
                <div class="my-3 text-center col-4">
                    <label>Qual você deseja adicionar?</label>
                    <input type="text" class="form-control" @bind-value="teoria.NovaObra" />
                </div>
                <div class="my-3 text-center col-4"></div>
            }
        </div>
        <div class="my-3">
            <BlazorInputFile.InputFile OnChange="HandleFileSelect" style="display:none;" id="imagemTitulo"></BlazorInputFile.InputFile>
            <label for="imagemTitulo"
                   style="background-color:#ccc;width:100%;
            border-radius:5px;cursor:pointer;padding:10px;text-align:center">
                Clique aqui para escolher uma imagem para ser capa da sua teoria &#187
            </label>
            @if (!String.IsNullOrEmpty(@teoria.ImagemTitulo))
            {
                <input type="image" style="height:50%; width:100%;" src="data:image/jpeg;base64, @teoria.ImagemTitulo" />
            }
        </div>
    </div>
    <!-- #region Criacao texto -->
    <div class="my-3 container">
        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <span class="ql-formats">
                    <select class="ql-font">
                        <option selected=""></option>
                        <option value="serif"></option>
                        <option value="monospace"></option>
                    </select>
                </span>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                    <button class="ql-image"></button>
                </span>
            </ToolbarContent>
            <EditorContent>
                <label>Comece a criar sua teoria aqui :)</label>
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
            </EditorContent>
        </BlazoredTextEditor>
    </div>
    <!-- #endregion -->
    <div class="text-center my-4 py-5">
        <input type="submit" value="Criar Teoria" class="btn-dark btn-lg">
    </div>
    @*<button @onclick="getHtml" class="btn-dark my-5"><a href="">Enviar</a></button>*@

</EditForm>


</div>

@code {
    string QuillHTMLContent;
    string QuillContent;
    BlazoredTextEditor QuillHtml;
    BlazoredTextEditor QuillNative;
    IFileListEntry? file;
    string errMessage = "";
    string mensagem = "Escolha uma imagem para ser capa da sua teoria";
    int count = 1;

    int idCategoria;
    int valorNaoEncontrei;
    string baseUrl = Configuration.BaseUrl;

    List<Categoria> categorias = new();
    Categoria categoria = new();
    List<Obra> obras = new();
    Obra obra = new();

    Teoria teoria = new();



    protected override async Task OnInitializedAsync()
    {
        //await js.InvokeVoidAsync("teste");
        await GetObrasAsync();
        await GetCategoriaAsync();
    }

    async Task HandleFileSelect(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 2000000)
            {
                errMessage = "Tamanho limite máximo da imagem: 2MB";
                await js.InvokeVoidAsync("alert", errMessage);
                return;
            }

        }
        await GetBase64File();
        StateHasChanged();
    }

    async Task GetBase64File()
    {
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        teoria.ImagemTitulo = Convert.ToBase64String(bytes);
        mensagem = "";
    }




    async Task GetCategoriaAsync()
    {
        categorias = await http.GetFromJsonAsync<List<Categoria>>($"{baseUrl}/categorias");
    }

    async Task GetObrasAsync()
    {
        obras = await http.GetFromJsonAsync<List<Obra>>($"{baseUrl}/obras");
    }

    async Task PostTeoriaAsync()
    {
        //htmlText = await js.InvokeAsync<string>("getHtml");
        htmlText = await this.QuillHtml.GetHTML();
        //htmlText.Replace(input, "").Replace(dragDropZone, "").Replace(altura, "").Replace(largura, "");
        //teoria.Conteudo = htmlText;
        teoria.Conteudo = htmlText;
        try
        {
            if (string.IsNullOrEmpty(teoria.Titulo))
            {
                errMessage = "Coloque um título ppara sua teoria";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (teoria.IdCategoria == 0)
            {
                errMessage = "Selecione uma categoria";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (teoria.IdObra == 0)
            {
                errMessage = "Selecione uma obra";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (string.IsNullOrEmpty(teoria.ImagemTitulo))
            {
                errMessage = "Coloque uma imagem de capa da teoria";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else if (string.IsNullOrEmpty(teoria.Conteudo))
            {
                errMessage = "Escreva algo na sua teoria :)";
                await js.InvokeVoidAsync("alert", errMessage);
            }
            else
                await http.PostAsJsonAsync<Teoria>($"{baseUrl}/teoria", teoria);
        }
        catch (Exception errMessage)
        {
            await js.InvokeVoidAsync("alert", errMessage);
        }
        finally
        {
            if (errMessage == null || errMessage == "")
            {
                await js.InvokeVoidAsync("alert", "Tudo certo!");
                nav.NavigateTo("");

            }
        }
    }
}