@page "/suateoria"
@inject IJSRuntime js
@inject HttpClient http
@inject NavigationManager nav

<EditForm Model="teoria" OnSubmit="@PostTeoriaAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="container">
        <div class=row>
            <div class="col-sm-12 my-3">
                <input type="text" id=tituloTeoria placeholder="Digite o título da teoria..." @bind-value="teoria.Titulo" />
            </div>
            <div class="col-md-6 col-sm-12">

                <select class="form-select" @bind="teoria.IdCategoria">
                    <option value="0">Selecione uma categoria</option>
                    @foreach (var item in categorias)
                    {
                        <option value="@item.Id">@item.Nome</option>
                    }
                </select>
            </div>
            <div class="col-md-6 col-sm-12">
                <select class="form-select" @bind="teoria.IdObra">
                    <option value="0">Selecione um título</option>
                    @if (teoria.IdCategoria >= 1)
                    {
                        <option value="-1">Não encontrei</option>
                        @foreach (var item in obras.Where(w => w.IdCategoria == teoria.IdCategoria).OrderBy(o=>o.Nome))
                        {
                            <option value="@item.Id">@item.Nome</option>
                        }
                    }
                </select>
            </div>
            @if (teoria.IdObra == -1)
            {
                <div class="my-3 text-center col-4"></div>
                <div class="my-3 text-center col-4">
                    <label>Qual você deseja adicionar?</label>
                    <input type="text" class="form-control" @bind-value="teoria.NovaObra" />
                </div>
                <div class="my-3 text-center col-4"></div>
            }
        </div>
        <div class="my-3">
            <BlazorInputFile.InputFile OnChange="HandleFileSelect" style="display:none;" id="imagemTitulo"></BlazorInputFile.InputFile>
            <label for="imagemTitulo"
                   style="background-color:#ccc;width:100%;
            border-radius:5px;cursor:pointer;padding:10px;text-align:center">
                Clique aqui para escolher uma imagem para ser capa da sua teoria &#187
            </label>
            @if (!String.IsNullOrEmpty(@teoria.ImagemTitulo))
            {
                <input type="image" style="height:50%; width:100%;" src="data:image/jpeg;base64, @teoria.ImagemTitulo" />
            }
        </div>
        <div class="my-3">
            <CriaTextoTeoria></CriaTextoTeoria>
        </div>
    </div>

    <input type="submit" value="Enviar" class="btn-dark my-5">
    @*<button @onclick="getHtml" class="btn-dark my-5"><a href="">Enviar</a></button>*@

</EditForm>



@code {
    IFileListEntry? file;
    string errMessage = "";
    string mensagem = "Escolha uma imagem para ser capa da sua teoria";
    int count = 1;
    public string htmlText { get; set; } = "";
    string input = "<div class=\"drag-drop-zone\" b-zuc3isr0wf=\"\"><!--!--><input type=\"file\" _bl_2=\"\"></div>";
    string dragDropZone = "<div class=\"drag-drop-zone\" b-zuc3isr0wf=\"\"></div>";
    string largura = "<input class=\"tamanhoImagem\" type=\"number\" min=\"4\" max=\"100\" b-zuc3isr0wf=\"\">";
    string altura = "<input class=\"tamanhoImagem\" type=\"number\" min=\"4\" max=\"100\" b-zuc3isr0wf=\"\">";

    int idCategoria;
    int valorNaoEncontrei;



    List<Categoria> categorias = new();
    Categoria categoria = new();
    List<Obra> obras = new();
    Obra obra = new();

    Teoria teoria = new();

    protected override async  Task OnAfterRenderAsync(bool firstRender)
    {
        await getHtml();
    }


    protected override async Task OnInitializedAsync()
    {
        //await js.InvokeVoidAsync("teste");
        await GetObrasAsync();
        await GetCategoriaAsync();
    }

    async Task HandleFileSelect(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 2000000)
            {
                errMessage = "Tamanho limite máximo da imagem: 2MB";
                await js.InvokeVoidAsync("alert", errMessage);
                return;
            }

        }
        await GetBase64File();
        StateHasChanged();
    }

    async Task GetBase64File()
    {
        byte[] bytes;
        var memoryStream = await file.ReadAllAsync();
        bytes = memoryStream.ToArray();
        teoria.ImagemTitulo = Convert.ToBase64String(bytes);
        mensagem = "";
    }


    async Task getHtml()
    {
        htmlText = await js.InvokeAsync<string>("getHtml");
        htmlText.Replace(input, "").Replace(dragDropZone, "").Replace(altura, "").Replace(largura, "");
        teoria.Conteudo = htmlText;
    }

    async Task GetCategoriaAsync()
    {
        categorias = await http.GetFromJsonAsync<List<Categoria>>("http://localhost:5285/categorias");
    }

    async Task GetObrasAsync()
    {
        obras = await http.GetFromJsonAsync<List<Obra>>("http://localhost:5285/obras");
    }

    async Task PostTeoriaAsync()
    {
        await http.PostAsJsonAsync<Teoria>("http://localhost:5285/teoria", teoria);
        //nav.NavigateTo("");
    }
}