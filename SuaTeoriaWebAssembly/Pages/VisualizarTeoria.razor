@page "/visualizarteoria/{IdTeoria:int}"
@inject HttpClient http
@inject Blazored.SessionStorage.ISessionStorageService session
@inject IJSRuntime js

<div class="container my-5">
    <input type="image" style="height:50%; width:100%; cursor:default" src="data:image/jpeg;base64, @teoria.ImagemTitulo" />
    @if (!isFavorite)
    {
        <EditForm Model="favorite" OnSubmit="PostCurtida">
            <button type="submit" class="mt-2 btn btn-dark">CURTIR</button>
        </EditForm>
    }
    else
    {
        <EditForm Model="favorite" OnSubmit="DeleteCurtida">
            <button type="submit" class="mt-2 btn btn-dark">CURTIU</button>
        </EditForm>
    }
    <div class="col-sm-12 my-3 text-center" style="color:white;">
        <h2>@teoria.Titulo</h2>
    </div>
    <div style="color:white;">

        @conteudo
    </div>
</div>


@code {
    Usuario userInfo = new();
    Favorite favorite = new();
    bool isFavorite;
    List<Favorite> favorites = new();
    Teoria teoria = new Teoria();
    [Parameter]
    public int IdTeoria { get; set; }
    MarkupString conteudo;
    string baseUrl = Configuration.BaseUrl;
    protected override async Task OnInitializedAsync()
    {
        await GetTeoriaAsync(IdTeoria);
        await GetCurtidas();
    }

    async Task GetTeoriaAsync(int idTeoria)
    {
        teoria = await http.GetFromJsonAsync<Teoria>($"{baseUrl}/teoria/{idTeoria}");
        conteudo = (MarkupString)teoria.Conteudo.Replace("<img src=","<img style=max-width:100% src=");
    }

    async Task GetCurtidas()
    {
        userInfo = await session.GetItemAsync<Usuario>("SessionUser");
        if (userInfo.Nome != "Anonimous")
        {
            favorites = await http.GetFromJsonAsync<List<Favorite>>($"{baseUrl}/curtidas");
            isFavorite = favorites.Where(x => x.IdCategoria == teoria.IdCategoria && x.IdObra == teoria.IdObra && x.IdTeoria == teoria.Id && x.IdUsuario == userInfo.Id).Any();
        }
    }

    async Task PostCurtida()
    {
        favorite = new Favorite
        {
            Date = DateTime.Now,
            IdCategoria = teoria.IdCategoria,
            IdObra = teoria.IdObra,
            IdTeoria = teoria.Id,
            IdUsuario = userInfo.Id
        };
        if (userInfo.Nome == "Anonimous")
        {
            await js.InvokeVoidAsync("alert", "você precisa estar logado.");
        }
        else
        {
            await http.PostAsJsonAsync<Favorite>($"{baseUrl}/curtidas", favorite);
        }
        await GetCurtidas();
    }

    async Task DeleteCurtida()
    {
        favorite = new Favorite
        {
            IdCategoria = teoria.IdCategoria,
            IdObra = teoria.IdObra,
            IdTeoria = teoria.Id,
            IdUsuario = userInfo.Id
        };
        await http.DeleteAsync($"{baseUrl}/curtidas?idTeoria={favorite.IdTeoria}&idUsuario={favorite.IdUsuario}&idObra={favorite.IdObra}&idCategoria={favorite.IdCategoria}");

        await GetCurtidas();
    }
}
