@page "/visualizarteoria/{IdTeoria:int}"
@inject HttpClient http
@inject Blazored.SessionStorage.ISessionStorageService session
@inject IJSRuntime js
@inject NavigationManager nav

<div class="container my-5">

    <input type="image" style="height:50%; width:100%; cursor:default" src="@teoria.ImagemTitulo" />
    <div class="row">

        @if (!isFavorite)
        {
            <EditForm Model="favorite" OnSubmit="PostCurtida">
                <button type="submit" class="mt-2 btn btn-light @Disabled"><b>CURTIR</b></button>
            </EditForm>
        }
        else
        {
            <EditForm Model="favorite" OnSubmit="DeleteCurtida">
                <button type="submit" class="mt-2 btn btn-dark @Disabled"><b>CURTIU</b></button>
            </EditForm>
        }
        <div style="float:right">

           
        </div>
        
        <div class="pt-3" style="color:white;"> <label style="color:white;float:right">@nomeObra.ToUpper()</label>Criado por: <b>@usuario.User <br /></b> Data: <b>@teoria.DataCriacao.ToShortDateString()</b></div>
    </div>
    <div class="col-sm-12 my-3 text-center" style="color:white;">
        <h2>@teoria.Titulo</h2>
    </div>
    <div style="color:white;">

        @conteudo
    </div>
</div>


@code {
    public string Disabled = "";
    Usuario userInfo = new();
    Usuario usuario = new();
    Favorite favorite = new();
    bool isFavorite;
    List<Favorite> favorites = new();
    Teoria teoria = new Teoria();
    Obra obra = new();
    string nomeObra = "unknown";
    [Parameter]
    public int IdTeoria { get; set; }
    MarkupString conteudo;
    string baseUrl = Configuration.BaseUrl;
    protected override async Task OnInitializedAsync()
    {
        await GetTeoriaAsync(IdTeoria);
        await GetCurtidas();
        await GetUsuario();
        await GetObraById(teoria.IdObra);
    }

    async Task GetObraById(int IdObra)
    {
        if (IdObra != -1)
        {
            obra = await http.GetFromJsonAsync<Obra>($"{baseUrl}/obra/{IdObra}");
            nomeObra = obra.Nome;
        }


    }

    async Task GetUsuario()
    {
        usuario = await http.GetFromJsonAsync<Usuario>($"{baseUrl}/usuarios/{teoria.IdUsuario}");
    }

    async Task GetTeoriaAsync(int idTeoria)
    {
        try
        {
            teoria = await http.GetFromJsonAsync<Teoria>($"{baseUrl}/teoria/{idTeoria}");
            if (teoria != null)
            {
                conteudo = (MarkupString)teoria.Conteudo.Replace("<img src=", "<img style=max-width:100% src=");
            }
            else
            {
                await js.InvokeVoidAsync("alert", "Teoria não existe");
                nav.NavigateTo(@nav.Uri, true);
            }

        }
        catch (Exception)
        {

            nav.NavigateTo(@nav.Uri, true);
        }

    }

    async Task GetCurtidas()
    {

        string? intUser = await js.InvokeAsync<string>("localStorage.getItem", "Usuario");
        if (intUser != null || intUser != "0")
        {
            userInfo.Id = Convert.ToInt32(intUser);
            favorites = await http.GetFromJsonAsync<List<Favorite>>($"{baseUrl}/curtidas");
            isFavorite = favorites.Where(x => x.IdCategoria == teoria.IdCategoria && x.IdObra == teoria.IdObra && x.IdTeoria == teoria.Id && x.IdUsuario == userInfo.Id).Any();
        }
        else{
            userInfo.Nome = "Anonimous";
        }
    }

    async Task PostCurtida()
    {
        Disabled = "disabled";
        favorite = new Favorite
            {
                Date = DateTime.Now,
                IdCategoria = teoria.IdCategoria,
                IdObra = teoria.IdObra,
                IdTeoria = teoria.Id,
                IdUsuario = userInfo.Id
            };

       
        if (userInfo.Nome == "Anonimous")
        {
            await js.InvokeVoidAsync("alert", "você precisa estar logado.");
        }
        else
        {
            await http.PostAsJsonAsync<Favorite>($"{baseUrl}/curtidas", favorite);
        }
        await GetCurtidas();
        Disabled = "";
    }

    async Task DeleteCurtida()
    {
        Disabled = "disabled";
        favorite = new Favorite
            {
                IdCategoria = teoria.IdCategoria,
                IdObra = teoria.IdObra,
                IdTeoria = teoria.Id,
                IdUsuario = userInfo.Id
            };
        await http.DeleteAsync($"{baseUrl}/curtidas?idTeoria={favorite.IdTeoria}&idUsuario={favorite.IdUsuario}&idObra={favorite.IdObra}&idCategoria={favorite.IdCategoria}");

        await GetCurtidas();

        Disabled = "";
    }
}
